// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.5.1
// source: researchClient.proto

package raft

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResearchClientServiceClient is the client API for ResearchClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResearchClientServiceClient interface {
	Research(ctx context.Context, in *ResearchRequest, opts ...grpc.CallOption) (*ResearchResponse, error)
}

type researchClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResearchClientServiceClient(cc grpc.ClientConnInterface) ResearchClientServiceClient {
	return &researchClientServiceClient{cc}
}

func (c *researchClientServiceClient) Research(ctx context.Context, in *ResearchRequest, opts ...grpc.CallOption) (*ResearchResponse, error) {
	out := new(ResearchResponse)
	err := c.cc.Invoke(ctx, "/raft.ResearchClientService/research", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResearchClientServiceServer is the server API for ResearchClientService service.
// All implementations must embed UnimplementedResearchClientServiceServer
// for forward compatibility
type ResearchClientServiceServer interface {
	Research(context.Context, *ResearchRequest) (*ResearchResponse, error)
	mustEmbedUnimplementedResearchClientServiceServer()
}

// UnimplementedResearchClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResearchClientServiceServer struct {
}

func (UnimplementedResearchClientServiceServer) Research(context.Context, *ResearchRequest) (*ResearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Research not implemented")
}
func (UnimplementedResearchClientServiceServer) mustEmbedUnimplementedResearchClientServiceServer() {}

// UnsafeResearchClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResearchClientServiceServer will
// result in compilation errors.
type UnsafeResearchClientServiceServer interface {
	mustEmbedUnimplementedResearchClientServiceServer()
}

func RegisterResearchClientServiceServer(s grpc.ServiceRegistrar, srv ResearchClientServiceServer) {
	s.RegisterService(&ResearchClientService_ServiceDesc, srv)
}

func _ResearchClientService_Research_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResearchClientServiceServer).Research(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.ResearchClientService/research",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResearchClientServiceServer).Research(ctx, req.(*ResearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResearchClientService_ServiceDesc is the grpc.ServiceDesc for ResearchClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResearchClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raft.ResearchClientService",
	HandlerType: (*ResearchClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "research",
			Handler:    _ResearchClientService_Research_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "researchClient.proto",
}
